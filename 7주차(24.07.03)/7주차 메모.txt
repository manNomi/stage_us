- 기초 교육 마지막 주차 
ㄴ 1~4 : 프론트엔드 
ㄴ 5 - web
ㄴ 6 - db
ㄴ 오늘 할것은 프론트 엔드와 데이터베이스를 연결해줄 무언가 

** 백엔드 개발 

- 백엔드 개발의 역할 
1. 프론트엔드로부터 온 요청을 해석 
2. 그 요청에 대해서 적절한 sql 문 준비 
3. sql을 db에 전달하고 필요하다면 값을 받아오기 
4. 값을 정제해서 프론트엔드에 전달 

- 백엔드 개발에서 신경써야할 부분 
1. 프로젝트의 성능은 백엔드가 담당 
-> db통신 작업 줄이기 

2. 프로젝트의 무결성 - 백엔드가 담당 
ㄴ 예외처리를 매우매우 꼼꼼하게 해야 함

3. http 통신 
ㄴ web 서버 -> http 통신은 특징이 있다 
ㄴ http 통신은 단방향이다 -> 통신이 간단함 
ㄴ 채팅, 실시간 알람 등 구현 불가능 

** 백엔드 개발의 역사 

- 백엔드 언어의 세대 

1세대 -> php , jsp asp.net 등 
ㄴ 한 파일에 프론트와 백엔드를 함께 적는다는 특징이 있다 
ㄴ 백엔드 통신이 필요하면 무조건 다른 파일을 호출 했어야한다 (페이지 이동 필수)
ㄴ 파일 별로 넘나들음 -> 페이지 이동이 필수 
 
2세대 -> spring , express , django 등
ㄴ 프론트와 백의 개념이 생기고, 서로가 독립개발을 한다 
ㄴ 프로젝트가 두개이다 
 -> 값을 주고 값을 받는 구조 
ㄴ 백엔드 통신을 위해서 더이상 페이지 이동을 할 필요가 없다 

서로 동작하는 방법이 다르다 

-> 그럼 왜 JSP 배울까 ? 
   1. 개발자의 코딩 실력을 높이기 위해 
	-> 개발자가 정확히 파악하고 적지 않으면 동작하지 않음    
 	-> (정확한 흐름 가지고 설꼐 해야만 돌아가는 언어임)
   2. 논리적으로 사고하기 위해서 
	-> 논리를 정하려면 근거가 있어야 하며 , 근거는 공부와 경험으로 정해진다 
	-> 2세대 언어를 배울때도 이를 이해하기 위해 
   3. 에러 핸들링 연습을 위해 
	-> jsp는 JAVA 기반의 언어
	-> 매우 체계적이다 
	-> 에러 처리하는 연습을 할 수 있다

- 특징 

1. 1세대 백엔드 언어 한 종류이며 , 마찬가지로 백엔드가 필요하면 페이지 이동을 해야한다 
-> 백엔드 요청을 위한 파일 : action 

Jsp -> 
Action -> 백엔드 요청만을 위한 파일 


2. 스파게티 코드를 조심해야 함
Jsp -> html , css , js 모두 섞어서 코딩할 수 있음
-> 이걸 섞어서 코딩하는걸 스파게티 코드라고 한다 

3.  이름은 JS 와 비슷하지만 문법은 Java 와 문법이 100% 일치한다 
-> java라고 검색하는 것이 빠름 

Tomcat <-> mariaDB 연결 하는 프로그램 -> connecter 
WAS와 DB를 연결해주는 것 
모든 was마다 connector 존재 

마리아 디비 홈페이지 
->개발자용 
-> 마리아 디비 다운로드 
-> 커넥터 
-> product 

https://dlm.mariadb.com/3852153/Connectors/c/connector-c-3.3.10/mariadb-connector-c-3.3.10-centos74-amd64.tar.gz

복사해서 wget으로 서버에 설치 
-> mv 이용해서 tomcat의 lib에 넣는다 
-> tomcat 껐다가 킨다 (bin)

Webapps 에 week7 넣는다 

Sftp remotepath 입력하면 타고 들어갈필요 없음 

Jsp 는 vsc에서 안됨 
-> 익스텐션 다운로드 필요 
Jsp language support 설치 

JSP Language Support
-> 컬러 입혀준다 

웰컴파일 
-> 인덱스로 두는게 좋다 

Html 자동완성 안되서 html 파일 만들어서 가져오기 


