** web 프론트엔드 

- 과정 기술 목표 

1. 컴포넌트 라이브러리의 정의와 필요성 
2. Web 프론트엔드 분야의 여러 패키지들 학습 
3. web 프론트엔드의 소프트웨어 아키텍처 학습
4. 컴포넌트 랜더링 최적화 기법 
5. 사용자를 고려한 레이아웃 & 편의성 고려
-> 디자이너에게 준 것을 녹여내는것 / 디자인 보고 반응형 웹으로 바꾸는것 
* 가장중요 
기술도 기술이지만 만드는게 가장 중요하다 ( 결과가 가장 중요 )

- 프론트엔드 개발자에게 필요한 소양 

1. 특유의 감각이 있어야 함
-> 생각보다 개발자들 중에선 , 디자인을 보고도 그거와 똑같이 못만드는 개발자가 있다  
-> 똑같이 만드는게 중요함 px 다르게 깎거나 느낌이 다른거 

2. 모든 개발에 있어서 편의성을 고려해야 한다 
-> 고객이 헷갈리지 않는가 / 인풋태그에 플레이스 홀더로 박아 놓는것 같은
-> 동의 버튼 다 누르면 전체 동의 다 눌리는가 
-> 궁극적으로 고객에게 명확하게 전달되고 , 고객이 헷갈리지 않겠는가 ? 

3. 무결성과 예외처리 보다도 중시해야하는게 유지보수이다. 
ㄴ 백엔드 한번 바뀔때 , 프론트 엔드 여러 번 바뀜 
ㄴ 프론트 엔드는 고객과 직접 만나는 부분이라 유행, 패션 등에 민감 
ㄴ 디자인이 촌스러우면 기능이 아무리 좋아도 사람들이 쓰지 않기 때문에 
ㄴ 세세하게도 고객이 불편하다고 느끼는 부분을 자주 수정함 
-> 하나를 수정해도 다른곳에 문제가 생기지 않는가 
예시 ) 문제가 생긴부분을 바로 수정 가능한가 
예시 ) 내가 뭔가를 수정해도 영항이 안간다는 보장이 있는가

4. 다양한 기술을 찾아보고 공부하는데 흥미가 있어야 한다 
ㄴ 항상 공시 document / it 뉴스 / 유튜브 등을 구독하고 보는게 좋다 



** JavaScript Essential 

- js 의 중요성 
ㄴ 기초 단계에서 사용했던 js의 역할 ? -> event 부여하는 언어 
ㄴ Node.js 출시되고 나서 이 상황이 달라짐 

- Node.js 가 뭔데 
ㄴ Node.js는 백엔드 개발자만의 기술이 아님 
ㄴ Node.js는 JS 런타임 소프트웨어 
ㄴ Runtime은 언어를 해석해서 구동시켜주는 프로그램 의미 
ㄴ 그동안은 브라우저를 통해서 js를 해석했었다
ㄴ 그렇기 때문에 js가 웹 개발만의 재료였다 

- Node.js 의 파급력 
ㄴ js를 해석해서 구동시켜줄 친구가 늘었다. 
ㄴ 그래서 더이상 js 언어가 이벤트 싸개가 아니라 , 대규모 프로젝트용 언어가 되었다 

** JS의 문제점 

- js의 버전 
ㄴ 현재 우리가 사용하고 있는 js 버전은 ES5 버전 
ㄴ 2009년에 출시가 되었고 
ㄴ ES6 2015년 출시가 됨 

- ES5 버전 
ㄴ JS의 원래 역할을 이벤트 싸개 
ㄴ ES5 만으로도 충분했다 

- ES6 버전 
ㄴ 원래 event용으로만 사용되던 js 보니까 개판임 
ㄴ 프로젝트용으로 사용하기 어려웠음 
ㄴ js에 있는 여러 문제점을 해결하는데 초점이 맞춰져 있는 버전 
ㄴ 추가로 여러 언어들이 가지고 있는 최신 기법들도 포함시켰음 

Node.js 출시후 js 가 업데이트 되었음 

ES5 가 표준이다. 

- 앞으로 어떻게 준비해야하는가 
ㄴ ES6 이상 버전을 절대 모르면 안된다 
ㄴ 다양한 버전별 문법 뿐 아니라 , JS의 동작 구조 / 특징 / 구조적 한계를 공부해야 한다 
-> 더 좋은 문법을 찾아야함 
책 - 자바스크립트 모던 딥다이브 (교양지식)






