** component package 

- 소개 
ㄴ 기존에 페이지 단위로 개발되던 웹을 , 컴포넌트 단위로 개발될 수 있게 하는 패키지 

- 필요성 

1. 증복코드에 취약 / html은 연산 기능이 없음 
ㄴ 지금까지는 jsp의 반복문 혹은 js의 createElement로 이를 해결했음 
ㄴ 그렇다면 아싸리 모든 html을 js로 그리면 어떨까 

2. 동적 웹을 개발하는데 불리함 
ㄴ 화면 안에 데이터 많고 , 인터렉션 많은 웹 
ㄴ 브라우저 동작 구조상 불리함 
ㄴ 기존 웹은 페이지 단위이기 때문에 , 변화가 일어나면 페이지 단위로 업데이트가 일어남 
ㄴ 근데 이제 이걸 컴포넌트 단위로 바꾸었다. 

- 브라우저의 동작 구조 (렌더링)

1. DOM Tree 
ㄴ 서버로부터 HTML을 받음 
ㄴ html을 분석해서 Tag 들의 계층구조를 메모리에 만듬 

2. Render Tree 
ㄴ DOM Tree에 외부 css를 접합시킴 

3. Reflow 
ㄴ Render Tree를 기반으로 각 DOM이 화면에 그려지는 물리적인 좌표를 계산 

4. Pating  
ㄴ 계산된 좌표 값에 따라 화면에 그려준다 

- 이 과정의 문제점

1. 기존 웹은 페이지 단위로 동작함 
ㄴ 페이지 내에 변화가 있다면 위 과정을 단순히 반복한다 

2. 만약 JS 등을 통해 화면에 동시에 여러 곳이 바뀐다 가정 
ㄴ 바뀐 개수만큼 위 과정을 단순히 반복한다 

** Virtual DOM 

- 정의 
ㄴ 위 비효율성을 해결하기 위해 컴포넌트 패키지에 추가된 개념 
ㄴ componnent라는 개념을 만들었다 가상돔을 위해
ㄴ 브라우저 동작구조에 한 단계를 추가한 것 이다 

브라우저 동작구조 전에 가상돔이 한번더 생성되는 방식
- 동작 
ㄴ 메모리에 가상돔을 저장할 신규 공간을 만듬 
ㄴ 브라우저에 변화가 생겼을 때 , 일단 Virtual DOM이 받음 
ㄴ 그려지기 전인 가상으로 먼저 바꼈을 때의 모습을 계산함 
ㄴ 그리고나서 , 기존 것과 바뀐 부분만을 DOM Tree에 전달한다 
ㄴ 최종적으로 변경된 부분 ( 컴포넌트 단위로 ) 만 새로고침 되는 효과를 얻음 

- 그럼 Virtual DOM 은 항상 이로운가 ? 

1. Virtual DOM이 가지는 리스크
ㄴ 메모리를 더 사용함 
ㄴ 브라우저 동작 과정 자체의 추가 

2. 동적이 요소가 거의 없는 경우 
예시) 어떤 조작을 하던 전체 페이지가 바뀌는 웹 

3. 개발자가 잘못 쓴 경우 
-> 전체를 새로고침하도록 하는 방식으로 잘못 짰을떄 

** React 

- Compponent Package 종류 
ㄴ React , Angular , Vue , Svelte 등등 
* Svlete -> 성능이 좋음 알아두면 좋다

- React가 프론트엔드 개발의 전부인가?  
ㄴ React는 단순히 컴포넌트 패키지일 뿐이다 
ㄴ Component 패키지 + Global State 패키지 + Modern CSS 패키지 
			4:2:3 정도 

- React가 추구하는 설계 패턴 

1. 함수형 프로그래밍 
ㄴ React는 원래 객체 , 함수 프로그래밍 둘다 지원했음 
ㄴ 공식적으로 React 16버전 이후로는 객체형을 지원하지 않는다 
ㄴ 함수형 프로그래밍의 원칙 - 순수함수 & 함수형 프로그래밍 기법 

2. 응집도 ( Cohesion )
ㄴ 가장 중요한 개념 
ㄴ 같은 역할을 하는 코드가 얼마나 모여 있냐의 정도 
( 컴포넌트 한 개가 독립적으로 운용될 수 있냐 )
- 폴더 하나가 tag + css 인것도 응집도 라고 볼 수 있다 
ㄴ 코드적인 응집도 뿐 아니라 , 폴더 구조적인 응집도도 포함하는 말이다 
ㄴ 반대되는 개념으로 결합도가 있다 

응집도가 높다 : 재사용성과 유지보수성이 높다 -> 테스트가 용이하다 
       	     각 컴포넌트가 한개의 기능을 가질 확률이 높다
       단점 : 비즈니스 로직을 이해하기 어렵다 / 한눈에 알아보기 어렵다 

결합도가 높다 : 비즈니스 로직을 이해하기 쉬움 
      단점 : 재 사용성이 떨어지고 테스트가 불리 
-> 바닐라웹 

ㄴ React에서는 소프트웨어 아키텍쳐를 통해 위 문제를 해결한다 
ㄴ 기본적으로는 컴포넌트가 응집도를 가지게 한다 ( 한개의 기능을 가지고 독립적으로 운용 될 수 있게 )
ㄴ 폴더 구조를 통해 결합도를 챙기는 형태로 

- JSX 
ㄴ 현재 사용한 React 문법은 VirtualDOM을 사용한다는 외에는 createElement와 차이가 없음 (여전히 불편함)
ㄴ js + xml 
ㄴ js 코드 내에서 html 형태의 문법을 쓸 수 있게 하는 문법 
ㄴ 브라우저가 JSX를 해석을 못함 

- babel 패키지 
ㄴ 원래 목적은 ES6 이상 JS 문법을 ES5로 변환해주는 기능을 함 
ㄴ 이 babel이 JSX를 해석해주는 기능도 한다 ( ts도 변환함 )

- 컴포넌트 설계 원칙 

1. 컴포넌트는 한개의 목적을 가지게 설계 한다 
예시) map으로 돌아가는 자식요소 
2. 특정 행동이나 데이터 등이 변경되는 부분이 있다면 , 그 부분만을 분리시킨다 
ㄴ 백엔드 통신으로 데이터를 불러오는 부분은 무조건 분리해야 함 
-> 유튜브 메인 
3. 가독성 
ㄴ 한 컴포넌트가 너무 길 때 
500줄이 넘으면 분리 



2주차 과제 
shorts 페이지 만들기 
영상 상세보기 페이지 (우측 미리보기는 하지 않아도 된다)
댓글까지 구현 

헤더랑 어사이드 새로 생김 X