** State 

- Virtur Dom 존재 이유 
브라우저의 렌더링 과정에서 , 변화된 부분만을 모아주고 한 번에 처리해줌 
( 브라우저의 효율성을 높여줌 )

-> Virtual Dom 무조건 이로운가? 
ㄴ 어떤 조작을 하던 모든 요소가 바뀐다면 필요가 없음 
ㄴ 개발자가 잘못썼을 때 
( 화면에서 특정 컴포넌트만 렌더링 되어야 하는 상황인데 , 개발자가 잘못써서 무조건 상위 컴포넌트 , 앱이 렌더링 되는 상황 )

-State의 정의 
ㄴ 변수 / 일반 js에 없지만 component 라이브러리에만 존재하는 개념 
ㄴ Virtual DOM을 동작시키는 트리거 
( 이전의 과제는 Virtual DOM을 쓰긴 쓰지만 기존 바닐라웹과 동작구조에 차이가 없는 상황이다 )

- State의 동작 방식 
ㄴ 모든 컴포넌트는 특정한 State를 구독하고 있다 -> 감시 
ㄴ 해당 State가 변경되면 , Virtual DOM 이 동작한다 
ㄴ Virtual DOM이 해당 State를 구독하고 있는 컴포넌트를 다시 랜더링 시킨다 

- 바닐라 웹의 개발 방식
ㄴ 페이지의 내용을 변화시키는게 전부 다 개발자의 몫 
예시 ) EVENT 함수 내에서 정확하게 특정 Tag를 지목해서 어떻게 바꿔주세요 직접 명세 
	ㄴ 브라우저는 화면에 변화가 있을 때 마다 페이지 단위의 랜더링을 다시한다

- State를 이용한 개발 방식 
ㄴ 개발자가 페이지의 요소를 직접 변경하지 않음 
ㄴ 앞으로 개발자는 이벤트를 통해 오직 State만 바꿔주게 된다 
-> 다른건 절대 바꾸지 않는다 
ㄴ 브라우저 랜더링상의 효율성 / EVENT 함수의 구조 자체가 단순화 된다 

-> 컴포넌트를 고려할때 state도 고려할것 
컴포넌트 고려 사항 3가지에 추가 !! 
-> 이벤트의 시작과 도착지점은 묶어야함 : 
이벤트의 발생태그랑 이벤트의 결과가 보여질태그를 묶자 

** Rendering 

** Hook
( React 전용 함수 )
- 정의 
ㄴ React에서의 함수 분할을 hook이라고 한다 
ㄴ 우리가 지금 까지 하던 함수 분할과 차이가 있는가 ?
ㄴ 일반적인 js에서 만든 함수에서는 React 문법을 사용할 수 없음 
ㄴ hook에서는 React 문법을 사용 가능하다 
-> JS함수와 hook을 구분해서 사용해야한다 
-> 목적 : 기초단계 함수분할과 동일 증복 코드 제거 / 함수 가독성

Hook 의 종류 

1. React 내장 Hook 
ㄴ React가 자체적으로 미리 만들어둔 hook 
EX) useState / useEffect / useRef / useCallBack / useMemo 등등 

useState : state를 만들어주는 hook 
useEffect : 컴포넌트가 랜더링된 직후에 실행되어야 할 코드가 있을때 관리해주는 hook 
useRef : Tag를 담아주는 Hook 
doccument는 React 구조에 반한다 
-> 응집도 추구하는 리액트 입장에서 어느곳에서나 접근 가능한 doccument를 선호할 수 가 없다 
-> 어디서든 불러올수 있는것 피하자 

2. Custom hook 
ㄴ 개발자가 만든 Hook
ㄴ 몇몇 규칙이 들어간다 

- Custom Hook 의 규칙 
1. 무조건 use라는 이름으로 시작해야함 
 -> use로 안시작하면 hook이 아니기에 React 문법 못씀 
2. 커스텀 훅은 일반 js 함수에서 호출 불가
 -> 컴포넌트나 다른 커스텀훅에서만 호출 가능
-> 뷰랑 로직 분리할때도 사용한다 

